工程化的角度：软件要工整，符合一定的规范，可读性强。
1、万物皆对象
类本身是一个关于一些东西的描述的集合，比如说我们在世界上看到的千千万万的东西，比如人，以什么样的维度把人描述出来，这就是类要做的东西。是一个描述。如何在程序中用到这个人，就要在主函数中new Person（）是指创建一个以person类为模板为基础来创建一个人的对象，对象是指以一个类为模板为基础创造的一个真实的能看到的实例。
Person能成为对象要求关于这个类有一个相应的描述，通过这个描述就可以创造对象，
int 和Integer区别：int是Java的基本类型，每一个基本类型都会有一个相对应的类去描述他，Integer是类类型，点进Integer能看到他继承Number，number里面我们的基本类型都能找的。
private私有变量，类的私有变量称为属性，属性是用来描述类的一些变量。对每个属性创建对应的getter和setter方法（读取和赋值）便于我们在其他地方new出对象后对对象相应属性进行修改。
无参构造方法
把鼠标放在左侧哪一行要打断哪一行就点哪一行，然后点小箭头选择第二个Debug啥啥啥，以这种方式运行会停在你打断点的地方，然后点击step over（下一步）然后蓝色哪一行到了下一行，然后我们在bariables那一栏看到运行结果。用无参构造函数创建的对象默认属性都为零或者空
创建对象时为属性赋值，就是创建一个有参数的构造函数
例如：public Person（Integer id，int age，String username）｛this.id=id;this.age=age;this.username=username;｝
this表示关于person的一个对象（片面理解）
创建对象传入参数会调用想用构造函数然后给属性对象赋值。
可以debug一下验证我们的思路
2、所有对象都有一个祖宗-----Object
左边 stuckture点开可以看到所有类属性方法并且可以定位
对象里最基本的东西
所有对象必然要带着这些东西

父子关系就有了一个所谓的继承
c++里的继承是可以多继承的 而Java只能继承一个类（语法特性）继承之后有什么效果：这个类的对象会将被继承类的属性一并带过来使用，已经是一种抽象的东西了，但是我们还希望他更抽象一点，所以就有了abstract抽象类里能定义抽象方法。追求抽象就是追求工程的极简。
我们自己定义的那些类里面会有一些方法，这些方法都有具体的实现，大括号里的就是他的实现，但是抽象类里面的方法没有实现，意味着如果有类继承抽象类或者是实现了这个抽象类之后，他要是想实现这样一个抽象方法，每一个类可以有自己不同的实现。
一个读源码的工具：在类名上右键diagrams中选择第二个pps那个，就会看到一个类图，这个类图是一个单向的，在类图的尖头所指的那个右击选择showimplement啥啥啥的，把第二个加进来，这样子就出现一个抽象类有两个实现，以后读源码有复杂实现时 通过这种方式可以很清楚的描述出来。show啥啥啥的会有一个完整的类图。
抽象类还可以缠咋这些实际的东西，所以不够抽象，他实现的时候是用继承的方式实现的
interface接口：通用逻辑，新版本特性：只有抽象方法，特殊的抽象类，两个抽象类，用implements实现两个，间接完成了两个继承。




jdk是开发Java最基本的工具包
第一个介绍Java中数据结构叫集合collection
画类图：集合也是接口 并且继承了Iterable（没有规定接口必定以I开头）interface指接口，
类关系图：Iterable-Collection-ArrayList/LinkedList/HashSet
A是一个yishuzu为基础实现的列表
l链表为基础实现链表（无固定长度）和s最大区别是可以放重复的
S 是一个不重复的集合


demo：collection中simpleList
作业：读hashmap的源码 并且能够讲明其中putval这个方法的整个过程。
